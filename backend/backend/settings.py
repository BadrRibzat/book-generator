"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# Security
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# API Keys
# GROQ_API_KEY = config('GROQ_API_KEY')  # Deprecated - now using OpenRouter

OPENROUTER_API_KEY = config('OPENROUTER_API_KEY')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'corsheaders',
    'drf_spectacular',

    # Your apps
    'users',
    'books',
    'covers',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # DISABLED for API simplicity
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

# In TEMPLATES section, update DIRS:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Use database sessions instead of signed cookies for better cross-origin support
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

MONGODB_URI = config('MONGODB_URI')
MONGODB_DB_NAME = config('MONGODB_DB_NAME')

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# Additional CORS settings for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False  # Keep False for security

# Expose session cookie to frontend
CORS_EXPOSE_HEADERS = [
    'set-cookie',
]

# Allow common headers that frontend might send
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cookie',
]

# Allow common methods
CORS_ALLOWED_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Session settings for frontend compatibility
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = False  # Allow JavaScript access for debugging (set True in production)
SESSION_COOKIE_SAMESITE = 'Lax'  # Lax allows cookies on navigation
SESSION_COOKIE_SECURE = False  # False for development (HTTP), True in production (HTTPS)
SESSION_COOKIE_DOMAIN = None  # Allow localhost and 127.0.0.1
SESSION_COOKIE_NAME = 'sessionid'  # Explicit session cookie name
SESSION_COOKIE_PATH = '/'  # Cookie available for all paths

# CSRF disabled for API simplicity

# Celery Configuration
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'backend.authentication.CsrfExemptSessionAuthentication',  # Custom session auth without CSRF
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF Spectacular settings for Swagger/ReDoc
SPECTACULAR_SETTINGS = {
    'TITLE': 'Book Generator SaaS API',
    'DESCRIPTION': '''
    Complete REST API for generating publish-ready digital books with professional covers.
    
    ## Features
    - 15 trending sub-niches (Language/Kids, AI/Tech, Nutrition, Meditation, Home Workout)
    - Auto-generated market-optimized titles
    - LLM-powered content generation (15-30 pages)
    - 3 professional cover styles per book
    - Mandatory cover selection before download
    - Complete PDF assembly (cover + interior)
    
    ## Workflow
    1. SignUp → SignIn
    2. Create book with domain/sub-niche/page-length
    3. Wait for content generation (status: generating → content_generated)
    4. Wait for covers (status: cover_pending)
    5. **REQUIRED:** Select one of 3 covers
    6. Download complete PDF (status: ready)
    
    ## Authentication
    Session-based authentication. Use /api/auth/register/ and /api/auth/login/ to get started.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api',
    'CONTACT': {
        'name': 'Badr Ribzat',
        'email': 'badr@bookgenerator.com',
    },
    'LICENSE': {
        'name': 'MIT License',
    },
    'TAGS': [
        {'name': 'Authentication', 'description': 'User registration, login, logout, profile'},
        {'name': 'Configuration', 'description': 'Get available domains and sub-niches'},
        {'name': 'Books', 'description': 'Book generation, cover selection, download, history'},
    ],
}
