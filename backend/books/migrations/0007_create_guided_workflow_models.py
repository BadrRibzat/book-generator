# Generated by Django 4.2.7 on 2025-10-22 18:01

from django.db import migrations, models
import django.db.models.deletion


def populate_initial_data(apps, schema_editor):
    """Populate initial data for domains, niches, book styles, and cover styles."""
    Domain = apps.get_model('books', 'Domain')
    Niche = apps.get_model('books', 'Niche')
    BookStyle = apps.get_model('books', 'BookStyle')
    CoverStyle = apps.get_model('books', 'CoverStyle')
    Book = apps.get_model('books', 'Book')
    BookTemplate = apps.get_model('books', 'BookTemplate')

    # Create domains
    domains_data = [
        {'name': 'Technology', 'slug': 'technology', 'description': 'Books about software, hardware, AI, and digital innovation', 'icon': 'fas fa-laptop-code', 'order': 1},
        {'name': 'Business', 'slug': 'business', 'description': 'Entrepreneurship, management, marketing, and finance', 'icon': 'fas fa-briefcase', 'order': 2},
        {'name': 'Health & Wellness', 'slug': 'health-wellness', 'description': 'Fitness, nutrition, mental health, and lifestyle', 'icon': 'fas fa-heartbeat', 'order': 3},
        {'name': 'Personal Development', 'slug': 'personal-development', 'description': 'Self-improvement, motivation, and life skills', 'icon': 'fas fa-user-graduate', 'order': 4},
        {'name': 'Education', 'slug': 'education', 'description': 'Learning methods, study skills, and academic success', 'icon': 'fas fa-graduation-cap', 'order': 5},
        {'name': 'Creative Arts', 'slug': 'creative-arts', 'description': 'Writing, design, music, and artistic expression', 'icon': 'fas fa-palette', 'order': 6},
    ]

    domains = {}
    for domain_data in domains_data:
        domain = Domain.objects.create(**domain_data)
        domains[domain_data['slug']] = domain

    # Create niches
    niches_data = [
        # Technology niches
        {'domain': domains['technology'], 'name': 'Artificial Intelligence', 'slug': 'ai', 'description': 'AI, machine learning, and automation', 'audience': 'Tech professionals and enthusiasts', 'market_size': 'Growing rapidly', 'order': 1},
        {'domain': domains['technology'], 'name': 'Web Development', 'slug': 'web-development', 'description': 'Frontend, backend, and full-stack development', 'audience': 'Developers and startups', 'market_size': 'Large and stable', 'order': 2},
        {'domain': domains['technology'], 'name': 'Mobile Apps', 'slug': 'mobile-apps', 'description': 'iOS, Android, and cross-platform development', 'audience': 'App developers and entrepreneurs', 'market_size': 'High demand', 'order': 3},
        {'domain': domains['technology'], 'name': 'Data Science', 'slug': 'data-science', 'description': 'Data analysis, visualization, and insights', 'audience': 'Data professionals', 'market_size': 'Strong growth', 'order': 4},

        # Business niches
        {'domain': domains['business'], 'name': 'Entrepreneurship', 'slug': 'entrepreneurship', 'description': 'Starting and growing businesses', 'audience': 'Aspiring entrepreneurs', 'market_size': 'Massive opportunity', 'order': 1},
        {'domain': domains['business'], 'name': 'Digital Marketing', 'slug': 'digital-marketing', 'description': 'Social media, SEO, and online advertising', 'audience': 'Marketers and business owners', 'market_size': 'High demand', 'order': 2},
        {'domain': domains['business'], 'name': 'E-commerce', 'slug': 'ecommerce', 'description': 'Online retail and marketplace strategies', 'audience': 'Online sellers', 'market_size': 'Growing rapidly', 'order': 3},
        {'domain': domains['business'], 'name': 'Leadership', 'slug': 'leadership', 'description': 'Management and team leadership skills', 'audience': 'Managers and executives', 'market_size': 'Stable demand', 'order': 4},

        # Health & Wellness niches
        {'domain': domains['health-wellness'], 'name': 'Fitness', 'slug': 'fitness', 'description': 'Exercise, strength training, and physical health', 'audience': 'Fitness enthusiasts', 'market_size': 'Large and growing', 'order': 1},
        {'domain': domains['health-wellness'], 'name': 'Nutrition', 'slug': 'nutrition', 'description': 'Healthy eating and diet planning', 'audience': 'Health-conscious individuals', 'market_size': 'Strong demand', 'order': 2},
        {'domain': domains['health-wellness'], 'name': 'Mental Health', 'slug': 'mental-health', 'description': 'Stress management and emotional wellness', 'audience': 'General public', 'market_size': 'Growing awareness', 'order': 3},
        {'domain': domains['health-wellness'], 'name': 'Weight Loss', 'slug': 'weight-loss', 'description': 'Sustainable weight management strategies', 'audience': 'Weight loss seekers', 'market_size': 'Massive market', 'order': 4},

        # Personal Development niches
        {'domain': domains['personal-development'], 'name': 'Productivity', 'slug': 'productivity', 'description': 'Time management and efficiency techniques', 'audience': 'Professionals and students', 'market_size': 'High demand', 'order': 1},
        {'domain': domains['personal-development'], 'name': 'Motivation', 'slug': 'motivation', 'description': 'Goal setting and achievement strategies', 'audience': 'General public', 'market_size': 'Evergreen content', 'order': 2},
        {'domain': domains['personal-development'], 'name': 'Communication', 'slug': 'communication', 'description': 'Public speaking and interpersonal skills', 'audience': 'Professionals', 'market_size': 'Stable demand', 'order': 3},
        {'domain': domains['personal-development'], 'name': 'Mindfulness', 'slug': 'mindfulness', 'description': 'Meditation and present-moment awareness', 'audience': 'Stress management seekers', 'market_size': 'Growing rapidly', 'order': 4},

        # Education niches
        {'domain': domains['education'], 'name': 'Study Skills', 'slug': 'study-skills', 'description': 'Effective learning and memory techniques', 'audience': 'Students', 'market_size': 'Stable demand', 'order': 1},
        {'domain': domains['education'], 'name': 'Online Learning', 'slug': 'online-learning', 'description': 'Digital education and course creation', 'audience': 'Educators and learners', 'market_size': 'Growing rapidly', 'order': 2},
        {'domain': domains['education'], 'name': 'Language Learning', 'slug': 'language-learning', 'description': 'Foreign language acquisition methods', 'audience': 'Language learners', 'market_size': 'Global market', 'order': 3},
        {'domain': domains['education'], 'name': 'Test Prep', 'slug': 'test-prep', 'description': 'Exam preparation and study guides', 'audience': 'Students', 'market_size': 'Seasonal demand', 'order': 4},

        # Creative Arts niches
        {'domain': domains['creative-arts'], 'name': 'Writing', 'slug': 'writing', 'description': 'Creative writing and storytelling techniques', 'audience': 'Writers and authors', 'market_size': 'Growing community', 'order': 1},
        {'domain': domains['creative-arts'], 'name': 'Graphic Design', 'slug': 'graphic-design', 'description': 'Visual design and branding principles', 'audience': 'Designers and creatives', 'market_size': 'Strong demand', 'order': 2},
        {'domain': domains['creative-arts'], 'name': 'Photography', 'slug': 'photography', 'description': 'Digital photography and editing skills', 'audience': 'Photography enthusiasts', 'market_size': 'Stable market', 'order': 3},
        {'domain': domains['creative-arts'], 'name': 'Music Production', 'slug': 'music-production', 'description': 'Digital music creation and production', 'audience': 'Musicians and producers', 'market_size': 'Growing with technology', 'order': 4},
    ]

    niches = {}
    for niche_data in niches_data:
        niche = Niche.objects.create(**niche_data)
        niches[niche_data['slug']] = niche

    # Create book styles
    book_styles_data = [
        {'name': 'Educational Guide', 'tone': 'educational', 'target_audience': 'students', 'language': 'en', 'length': 'medium', 'description': 'Comprehensive learning resource with clear explanations', 'order': 1},
        {'name': 'Inspirational Handbook', 'tone': 'inspirational', 'target_audience': 'general', 'language': 'en', 'length': 'medium', 'description': 'Motivational content with practical advice', 'order': 2},
        {'name': 'Technical Manual', 'tone': 'technical', 'target_audience': 'professionals', 'language': 'en', 'length': 'full', 'description': 'Detailed technical instructions and procedures', 'order': 3},
        {'name': 'Fun Learning Book', 'tone': 'playful', 'target_audience': 'kids', 'language': 'en', 'length': 'short', 'description': 'Engaging content for young learners', 'order': 4},
        {'name': 'Professional Guide', 'tone': 'professional', 'target_audience': 'professionals', 'language': 'en', 'length': 'full', 'description': 'Business and career development content', 'order': 5},
        {'name': 'Conversational Guide', 'tone': 'conversational', 'target_audience': 'general', 'language': 'en', 'length': 'medium', 'description': 'Easy-to-read, friendly tone content', 'order': 6},
    ]

    book_styles = {}
    for style_data in book_styles_data:
        style = BookStyle.objects.create(**style_data)
        book_styles[style_data['name']] = style

    # Create cover styles
    cover_styles_data = [
        {'name': 'Minimalist', 'style': 'minimalist', 'description': 'Clean, simple design with plenty of white space', 'color_scheme': {'primary': '#000000', 'accent': '#666666'}, 'order': 1},
        {'name': 'Futuristic', 'style': 'futuristic', 'description': 'Modern, tech-inspired design with gradients', 'color_scheme': {'primary': '#00D4FF', 'accent': '#0099CC'}, 'order': 2},
        {'name': 'Playful', 'style': 'playful', 'description': 'Colorful, fun design with illustrations', 'color_scheme': {'primary': '#FF6B6B', 'accent': '#4ECDC4'}, 'order': 3},
        {'name': 'Elegant', 'style': 'elegant', 'description': 'Sophisticated design with serif fonts', 'color_scheme': {'primary': '#2C3E50', 'accent': '#E74C3C'}, 'order': 4},
        {'name': 'Corporate', 'style': 'corporate', 'description': 'Professional, business-appropriate design', 'color_scheme': {'primary': '#34495E', 'accent': '#3498DB'}, 'order': 5},
        {'name': 'Artistic', 'style': 'artistic', 'description': 'Creative, artistic design with unique elements', 'color_scheme': {'primary': '#9B59B6', 'accent': '#F1C40F'}, 'order': 6},
    ]

    cover_styles = {}
    for style_data in cover_styles_data:
        style = CoverStyle.objects.create(**style_data)
        cover_styles[style_data['name']] = style

    # Map existing data to new foreign keys
    # Map domains
    domain_mapping = {
        'technology': domains['technology'],
        'business': domains['business'],
        'health': domains['health-wellness'],
        'personal development': domains['personal-development'],
        'education': domains['education'],
        'creative arts': domains['creative-arts'],
    }

    # Update existing books using raw SQL to avoid field access issues
    from django.db import connection
    cursor = connection.cursor()

    # Get all books and their current domain values (now domain_id contains the old string values)
    cursor.execute("SELECT id, domain_id FROM books_book")
    books_data = cursor.fetchall()

    for book_id, domain_value in books_data:
        # Map domain
        if domain_value and isinstance(domain_value, str):
            mapped_domain = domain_mapping.get(domain_value.lower(), domains['technology'])
        else:
            mapped_domain = domains['technology']

        # Update the book with proper foreign key IDs
        cursor.execute(
            "UPDATE books_book SET domain_id = %s, niche_id = %s, book_style_id = %s WHERE id = %s",
            [mapped_domain.id, niches['ai'].id, book_styles['Educational Guide'].id, book_id]
        )

    # Update existing book templates
    cursor.execute("SELECT id, domain_id FROM books_booktemplate")
    templates_data = cursor.fetchall()

    for template_id, domain_value in templates_data:
        # Map domain
        if domain_value and isinstance(domain_value, str):
            mapped_domain = domain_mapping.get(domain_value.lower(), domains['technology'])
        else:
            mapped_domain = domains['technology']

        # Update the template with proper foreign key IDs
        cursor.execute(
            "UPDATE books_booktemplate SET domain_id = %s, niche_id = %s WHERE id = %s",
            [mapped_domain.id, niches['ai'].id, template_id]
        )


def reverse_populate_initial_data(apps, schema_editor):
    """Reverse the data population."""
    # This will be handled by Django's migration reversal
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('books', '0006_alter_book_domain_alter_book_sub_niche_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='BookStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('tone', models.CharField(choices=[('educational', 'Educational'), ('inspirational', 'Inspirational'), ('technical', 'Technical'), ('playful', 'Playful'), ('professional', 'Professional'), ('conversational', 'Conversational')], max_length=20)),
                ('target_audience', models.CharField(choices=[('kids', 'Kids (5-12 years)'), ('parents', 'Parents'), ('students', 'Students'), ('professionals', 'Professionals'), ('entrepreneurs', 'Entrepreneurs'), ('general', 'General Public')], max_length=20)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('es', 'Spanish'), ('de', 'German'), ('it', 'Italian'), ('pt', 'Portuguese')], default='en', max_length=2)),
                ('length', models.CharField(choices=[('short', 'Short (15-20 pages)'), ('medium', 'Medium (20-25 pages)'), ('full', 'Full (25-30 pages)')], default='medium', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CoverStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('style', models.CharField(choices=[('minimalist', 'Minimalist'), ('futuristic', 'Futuristic'), ('playful', 'Playful'), ('elegant', 'Elegant'), ('corporate', 'Corporate'), ('artistic', 'Artistic')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='cover_styles/')),
                ('color_scheme', models.JSONField(default=dict, help_text='Primary and accent colors')),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='FontAwesome icon name', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Niche',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('audience', models.CharField(blank=True, help_text='Target audience description', max_length=200)),
                ('market_size', models.CharField(blank=True, help_text='Market size info', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['domain', 'order', 'name'],
            },
        ),
        migrations.RenameIndex(
            model_name='book',
            new_name='books_book_domain__0e9637_idx',
            old_name='books_book_domain_4cfe23_idx',
        ),
        migrations.RenameIndex(
            model_name='booktemplate',
            new_name='books_bookt_domain__fa522c_idx',
            old_name='books_bookt_domain_718d53_idx',
        ),
        migrations.RemoveField(
            model_name='book',
            name='page_length',
        ),
        migrations.RemoveField(
            model_name='book',
            name='sub_niche',
        ),
        migrations.RemoveField(
            model_name='booktemplate',
            name='sub_niche',
        ),
        migrations.AddField(
            model_name='niche',
            name='domain',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='niches', to='books.domain'),
        ),
        migrations.AddField(
            model_name='book',
            name='book_style',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='books', to='books.bookstyle'),
        ),
        migrations.AddField(
            model_name='book',
            name='cover_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='books', to='books.coverstyle'),
        ),
        migrations.AddField(
            model_name='book',
            name='niche',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='books', to='books.niche'),
        ),
        migrations.AddField(
            model_name='booktemplate',
            name='niche',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='templates', to='books.niche'),
        ),
        migrations.AlterField(
            model_name='book',
            name='domain',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='books', to='books.domain'),
        ),
        migrations.AlterField(
            model_name='booktemplate',
            name='domain',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='templates', to='books.domain'),
        ),
        migrations.AlterUniqueTogether(
            name='niche',
            unique_together={('domain', 'slug')},
        ),
        migrations.RunPython(
            populate_initial_data,
            reverse_populate_initial_data,
        ),
    ]
